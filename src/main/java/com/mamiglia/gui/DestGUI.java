package com.mamiglia.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.mamiglia.settings.Destination;
import com.mamiglia.settings.RATIO_LIMIT;
import com.mamiglia.settings.Settings;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.logging.Level;

public class DestGUI extends Collapsible {
	private JSpinner widthField;
	private JSpinner heightField;
	private JComboBox<RATIO_LIMIT> ratioSelection;
	private JLabel wallpaperName;
	private JLabel wallpaperSubreddit;
	private JLabel wallpaperLink;
	private JSpinner periodField;
	private JPanel root;
	private JPanel monitorPanel;
	private JButton renameBtn;
	private JButton removeBtn;
	private JButton saveBtn;
	private JButton changeBtn;
	private final Destination dest;
	private final JCheckBox[] monitorList;


	DestGUI(Destination dest, GUI gui) {
		super(dest.getName());
		$$$setupUI$$$();
		setBody(root);
		this.dest = dest;

		monitorPanel.setLayout(new BoxLayout(monitorPanel, BoxLayout.Y_AXIS));
		var g = Settings.INSTANCE.getMonitors();
		monitorList = new JCheckBox[g.length];
		for (int i = 0; i < g.length; i++) {
			JCheckBox c = new JCheckBox(Destination.Companion.monitorName(g[i]));
			monitorList[i] = c;
			monitorPanel.add(c);
		}
		saveBtn.addActionListener(e -> saveData());
		removeBtn.addActionListener(e -> {
			Settings.INSTANCE.removeDestination(dest);
			this.removeAll();
		});
		renameBtn.addActionListener(e -> {
			dest.setName(JOptionPane.showInputDialog(this, "Insert new name"));
			this.setTitle(dest.getName());
		});
		changeBtn.addActionListener(e -> {
			saveData();
			gui.changeWallpaper(dest);
		});

		loadData();
	}

	private void loadData() {
		if (dest.getCurrent() != null) {
			wallpaperName.setText(dest.getCurrent().getTitle());
			wallpaperSubreddit.setText("r/" + dest.getCurrent().getSubreddit());
			createLink(wallpaperLink, "link", dest.getCurrent().getPostUrl());
		} else {
			wallpaperName.setText("None");
			createLink(wallpaperLink, "None", "");
		}
		this.setTitle(dest.getName());
		ratioSelection.setSelectedItem(dest.getRatioLimit());
		heightField.setValue(dest.getHeight());
		widthField.setValue(dest.getWidth());
		periodField.setValue(dest.getPeriod());
		for (int i = 0; i < monitorList.length; i++) {
			monitorList[i].setSelected(dest.getScreens().contains(i));
		}
		GUI.log.log(Level.FINE, "Destination" + dest.getName() + "loaded");
	}

	private void saveData() {
		dest.setRatioLimit((RATIO_LIMIT) ratioSelection.getSelectedItem());
		dest.setHeight((Integer) heightField.getValue());
		dest.setWidth((Integer) widthField.getValue());
		dest.setPeriod((Integer) periodField.getValue());
		dest.setScreens(new HashSet<>());
		for (int i = 0; i < monitorList.length; i++) {
			if (monitorList[i].isSelected()) {
				dest.getScreens().add(i);
			}
		}
		GUI.log.log(Level.FINE, "Destination " + dest.getName() + " Saved");
	}

	private void createUIComponents() {
		//TODO add image to icon
		heightField = new JSpinner(new SpinnerNumberModel(0, 0, 10000, 1));
		widthField = new JSpinner(new SpinnerNumberModel(0, 0, 10000, 1));
		periodField = new JSpinner(new SpinnerNumberModel(0, 0, 10000, 1));

		ratioSelection = new JComboBox<>(RATIO_LIMIT.values());
	}

	private static void createLink(JLabel label, String text, String link) {
		label.setText(text);
		label.setForeground(Color.CYAN);
		label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		label.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				try {
					Desktop.getDesktop().browse(new URI(link));
				} catch (IOException | URISyntaxException ex) {
					ex.printStackTrace();
				}
			}
		});
	}

	public static void main(String[] args) {
//		JFrame f = new JFrame();
//		f.add(new DestGUI(new Destination(), f));
//		f.setVisible(true);
//		f.pack();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		root = new JPanel();
		root.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
		panel1.setToolTipText("Screen resolution in pixels. Default: 1920");
		root.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Width:");
		panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		widthField.setInheritsPopupMenu(true);
		widthField.setToolTipText("Screen resolution in pixels. Default: 1920");
		panel1.add(widthField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Height");
		panel1.add(label2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		heightField.setInheritsPopupMenu(true);
		heightField.setToolTipText("Screen resolution in pixels. Default: 1080");
		panel1.add(heightField, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
		root.add(panel2, new GridConstraints(0, 0, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		wallpaperLink = new JLabel();
		wallpaperLink.setText("Post Link");
		panel2.add(wallpaperLink, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		wallpaperSubreddit = new JLabel();
		wallpaperSubreddit.setText("Subreddit");
		panel2.add(wallpaperSubreddit, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		wallpaperName = new JLabel();
		wallpaperName.setText("Name");
		panel2.add(wallpaperName, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		monitorPanel = new JPanel();
		monitorPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		panel2.add(monitorPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(10, 84), null, 0, false));
		monitorPanel.setBorder(BorderFactory.createTitledBorder(null, "monitors:", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
		final Spacer spacer2 = new Spacer();
		panel2.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		panel3.setToolTipText("Strict: Exact match to chosen resolution ratio\nRelaxed: From chosen resolution to square\nNone: Any ratio");
		root.add(panel3, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		ratioSelection.setForeground(new Color(-4473925));
		ratioSelection.setToolTipText("Strict: Exact match to chosen resolution ratio\nRelaxed: From chosen resolution to square\nNone: Any ratio");
		panel3.add(ratioSelection, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setHorizontalAlignment(10);
		label3.setText("Aspect ratio filter:");
		label3.setToolTipText("Strict: Exact match to chosen resolution ratio\nRelaxed: From chosen resolution to square\nNone: Any ratio");
		panel3.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		panel4.setToolTipText("");
		root.add(panel4, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		changeBtn = new JButton();
		changeBtn.setText("Change Now");
		panel4.add(changeBtn);
		renameBtn = new JButton();
		renameBtn.setText("Rename");
		panel4.add(renameBtn);
		saveBtn = new JButton();
		saveBtn.setText("Save");
		panel4.add(saveBtn);
		removeBtn = new JButton();
		removeBtn.setText("Remove");
		panel4.add(removeBtn);
		final JPanel panel5 = new JPanel();
		panel5.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		root.add(panel5, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label4 = new JLabel();
		label4.setText("Change every:");
		panel5.add(label4);
		periodField.setMaximumSize(new Dimension(88, 30));
		periodField.setMinimumSize(new Dimension(88, 30));
		panel5.add(periodField);
		final JLabel label5 = new JLabel();
		label5.setText("min");
		panel5.add(label5);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return root;
	}
}
